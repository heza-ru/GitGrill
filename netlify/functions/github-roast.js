const headers = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'Content-Type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Content-Type': 'application/json',
};

// Helper function to get GitHub API headers (for potential authentication)
function getGitHubHeaders() {
  const headers = {
    'User-Agent': 'GitGrill-App',
    'Accept': 'application/vnd.github.v3+json',
  };
  
  if (process.env.GITHUB_TOKEN) {
    headers['Authorization'] = `Bearer ${process.env.GITHUB_TOKEN}`;
    console.log('Using authenticated GitHub API (5000 requests/hour)');
  } else {
    console.log('Using unauthenticated GitHub API (60 requests/hour)');
  }
  
  return headers;
}

// Updated harsh roast templates based on the provided examples
const ROAST_TEMPLATES = {
  low_followers: [
    "With a whopping {followers} followers, you've managed to capture the attention of absolutely no one. I bet {followers === 1 ? 'it\'s your mom' : 'they\'re all spam bots'}.",
    "You've got {followers} followers - that's not a following, that's a pity party.",
    "Even your {followers} followers are probably just there out of obligation."
  ],
  
  fork_heavy: [
    "Your entire GitHub is just a graveyard of forks. Not a single original thought. Your creativity amounts to Ctrl+C, Ctrl+V.",
    "With most of your repos being forks, it looks like your programming philosophy is 'why create when you can copy?'",
    "Your GitHub looks like a retirement home for other people's ideas."
  ],
  
  low_activity: [
    "Your last meaningful update was in {lastYear}, and even that was probably just you fixing a typo.",
    "You've been here since {joinYear} and still haven't figured out how Git works.",
    "Your commit history is like a ghost town - lots of promises, zero delivery."
  ],
  
  poor_repos: [
    "Your best repo has {topStars} stars and it's written in {language}. That's not achievement, that's a cry for help.",
    "With {repoCount} repositories, you've mastered the art of quantity over quality.",
    "Your repositories are like your dating life - lots of attempts, zero success."
  ],
  
  single_language: [
    "Only knowing {language}? That's not being specialized, that's being unemployable.",
    "Your entire skill set can be summarized in one word: {language}. Diversify or die.",
    "Coding exclusively in {language} is like only eating plain toast - technically sustenance, but why?"
  ],
  
  emoji_overuse: [
    "Your commit messages read like a teenage girl's diary with all those emojis. Professional much?",
    "Using {emojiPercent}% emojis in commits doesn't make your code better, it makes you look desperate.",
    "Your emoji-to-code ratio suggests you're more interested in decorating than developing."
  ],
  
  generic_repos: [
    "Your '{repoName}' screams originality—oh wait, it doesn't.",
    "A '{repoName}' repo? How refreshingly unoriginal.",
    "Your project names sound like they were generated by an AI having a stroke."
  ],
  
  no_bio: [
    "Zero bio, zero personality, zero excitement. You're the human equivalent of beige.",
    "No bio? Let me guess - you're too mysterious for descriptions or too boring to bother.",
    "Your blank bio perfectly matches your empty repositories."
  ]
};

// Enhanced language-specific roasts with more variety
const LANGUAGE_ROASTS = {
  'JavaScript': [
    "JavaScript? The language where 'false' == 0 but 'false' !== 0. Perfect choice for someone who enjoys suffering.",
    "Ah, JavaScript - where undefined is defined and everything is broken by design. Just like your career choices.",
    "JavaScript: the language that makes other languages look good by comparison. How fitting for your skill level.",
    "Using JavaScript is like playing Russian roulette with a fully loaded gun - painful, unpredictable, and ultimately disappointing."
  ],
  'Python': [
    "Python? Because why write efficient code when you can pretend indentation is a programming paradigm?",
    "Python - for when you want to code like you're writing a children's book. Perfect for your reading level.",
    "Choosing Python is like choosing training wheels for your bicycle - technically it works, but everyone knows you're not ready for the real thing.",
    "Python: the language that makes slow look fast. Ideal for your thought processes."
  ],
  'Java': [
    "Java? Still writing enterprise-grade hello world applications, I see.",
    "Java - because why use one line when you can use fifty? Your verbosity matches your code.",
    "Java: the COBOL of the 21st century. How revolutionary of you to choose legacy technology.",
    "Writing Java is like filling out tax forms - unnecessarily complex and nobody enjoys it."
  ],
  'C++': [
    "C++ - because you enjoy segmentation faults as a hobby.",
    "C++: where memory management is manual and your pain is guaranteed. Masochist much?",
    "Using C++ is like performing surgery with a chainsaw - powerful, but you'll probably hurt yourself.",
    "C++ - the language that makes simple things complicated and complicated things impossible."
  ],
  'PHP': [
    "PHP? My condolences to your career prospects.",
    "PHP - the language that makes every other language look like poetry. How poetic justice.",
    "Choosing PHP is like choosing to eat expired food - technically possible, but why would you?",
    "PHP: Probably Hopeless Programming. The acronym explains everything about your choices."
  ],
  'Go': [
    "Go? Google's attempt to make programming boring succeeded, and you fell for it.",
    "Go - for when you want the simplicity of C with the excitement of watching paint dry.",
    "Using Go is like choosing vanilla ice cream every day - safe, boring, and disappointing.",
    "Go: the language that makes mediocrity look like a design goal."
  ],
  'Rust': [
    "Rust? You're that person who mentions being vegan within 5 minutes of meeting someone.",
    "Rust - because fighting the borrow checker is more fun than actually programming. Stockholm syndrome much?",
    "Using Rust is like dating someone who corrects your grammar - technically right, but insufferably annoying.",
    "Rust: where the compiler is smarter than you'll ever be, and it knows it."
  ],
  'TypeScript': [
    "TypeScript - JavaScript with training wheels for people who can't handle dynamic typing.",
    "TypeScript: because JavaScript wasn't painful enough on its own. You needed extra suffering.",
    "Using TypeScript is like putting makeup on a pig - it's still JavaScript underneath.",
    "TypeScript - Microsoft's way of saying 'we can make JavaScript worse.' Challenge accepted and achieved."
  ],
  'Swift': [
    "Swift? Still pretending iOS development is the future?",
    "Swift - Apple's gift to developers who enjoy vendor lock-in with their programming languages too.",
    "Using Swift is like buying only Apple products - overpriced, limited, and you convince yourself it's better.",
    "Swift: where syntax sugar can't hide the bitter taste of platform exclusivity."
  ],
  'Kotlin': [
    "Kotlin - Java with makeup. Still ugly underneath.",
    "Kotlin: Google's attempt to make Java bearable. Like putting lipstick on a hippopotamus.",
    "Using Kotlin is like renovating a condemned building - sure, it's an improvement, but why not start fresh?",
    "Kotlin - because apparently one JVM language wasn't enough for your confused career path."
  ],
  'C#': [
    "C# - Microsoft's Java clone for people who gave up on originality.",
    "C#: where everything is an object, including your disappointment in your language choice.",
    "Using C# is like shopping at the Microsoft store - limited selection, vendor lock-in, and questionable decisions.",
    "C# - because copying Java wasn't shameful enough, you had to use the copy."
  ],
  'Ruby': [
    "Ruby? That's so 2010. What's next, a MySpace profile?",
    "Ruby - the language that makes everything look like magic, including how your career disappeared.",
    "Using Ruby is like driving a car from the 90s - it runs, but everyone wonders why you haven't upgraded.",
    "Ruby: where productivity dies and elegance goes to suffer slowly."
  ],
  'HTML': [
    "HTML? That's not even a programming language. It's like calling yourself a chef because you can make toast.",
    "HTML - because apparently markup is the extent of your technical ambitions.",
    "Listing HTML as your main language is like listing 'breathing' as your primary skill.",
    "HTML: the participation trophy of programming languages."
  ],
  'CSS': [
    "CSS? Fighting with layout engines isn't programming, it's modern art - abstract and nobody understands it.",
    "CSS - where centering a div requires a computer science degree and three stackoverflow searches.",
    "Using CSS is like trying to fold a fitted sheet - theoretically possible, practically impossible.",
    "CSS: the language that makes designers cry and developers question their life choices."
  ]
};

function generatePersonalizedRoast(profile, repositories, metrics, analysis) {
  const roastParts = [];
  
  // Extract detailed profile data
  const name = profile.name || profile.login;
  const joinYear = new Date(profile.created_at).getFullYear();
  const accountAge = new Date().getFullYear() - joinYear;
  const followers = profile.followers;
  const following = profile.following;
  const repoCount = profile.public_repos;
  const location = profile.location;
  const company = profile.company;
  const bio = profile.bio;
  
  // Calculate additional metrics
  const totalStars = repositories.reduce((sum, repo) => sum + repo.stargazers_count, 0);
  const forkCount = repositories.filter(repo => repo.fork).length;
  const originalRepos = repositories.filter(repo => !repo.fork);
  const emptyRepos = repositories.filter(repo => repo.size === 0);
  const recentRepos = repositories.filter(repo => {
    const lastUpdate = new Date(repo.updated_at);
    const sixMonthsAgo = new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
    return lastUpdate > sixMonthsAgo;
  });
  
  // Special case for heza-ru (SearDuck's father)
  if (profile.login.toLowerCase() === 'heza-ru') {
    return `🦆👑 Ah, ${name}, SearDuck's father has graced us with his presence! Even the creator of the roasting duck cannot escape judgment.\n\nYour ${repoCount} repositories show that even divine beings struggle with consistency. With ${followers} followers, you've proven that being SearDuck's creator doesn't automatically grant popularity among mortals.\n\nYour coding journey since ${joinYear} reads like a tragicomedy - brilliant moments of duck creation followed by the inevitable reality of maintaining legacy code. The duck may respect you as his creator, but your GitHub statistics... well, they're refreshingly human.\n\nEven gods must face the harsh reality of public repositories. At least you gave the world SearDuck - that's worth more than any star count could ever be. 🦆✨`;
  }
  
  // INTRODUCTION - Personalized opening based on profile
  if (!bio && !company && !location) {
    roastParts.push(`🦆💀 Meet ${name} - the mystery developer! No bio, no company, no location. It's like you're actively trying to be forgettable. Anonymous and mediocre - what a combination!`);
  } else if (bio && bio.length < 20) {
    roastParts.push(`🦆💀 ${name}, your ${bio.length}-character bio says more about your lack of personality than a novel ever could. "${bio}" - truly inspiring stuff.`);
  } else {
    roastParts.push(`🦆💀 ${name}, ${accountAge} years on GitHub and still counting! Let's see what you've accomplished in your coding journey...`);
  }
  
  // SOCIAL METRICS ANALYSIS
  const followRatio = following > 0 ? followers / following : followers;
  if (followers === 0) {
    roastParts.push(`\n🔍 SOCIAL ANALYSIS: Zero followers. You've achieved the impossible - complete social invisibility in a platform designed for sharing code. Impressive in the worst possible way.`);
  } else if (followers <= 5 && following > 20) {
    roastParts.push(`\n🔍 SOCIAL ANALYSIS: Following ${following} people but only ${followers} follow back? That's not networking, that's digital stalking with a 0% success rate.`);
  } else if (followRatio < 0.1 && followers > 0) {
    roastParts.push(`\n🔍 SOCIAL ANALYSIS: Your follower-to-following ratio is ${followRatio.toFixed(2)}. You're basically the GitHub equivalent of sliding into DMs and getting left on read.`);
  } else if (followers < 10) {
    roastParts.push(`\n🔍 SOCIAL ANALYSIS: ${followers} followers after ${accountAge} years? That's roughly ${(followers/accountAge).toFixed(1)} followers per year. At this rate, you'll reach double digits sometime next decade.`);
  }
  
  // REPOSITORY QUALITY ASSESSMENT
  if (forkCount > originalRepos.length) {
    roastParts.push(`\n📁 REPOSITORY AUDIT: ${forkCount} forks vs ${originalRepos.length} original repos. Your GitHub is basically a museum of other people's work. Curating isn't coding, chief.`);
  }
  
  if (emptyRepos.length > 0) {
    const emptyPercent = Math.round((emptyRepos.length / repoCount) * 100);
    roastParts.push(`\n📁 REPOSITORY AUDIT: ${emptyRepos.length} completely empty repositories (${emptyPercent}% of your total). That's not minimalism, that's giving up with extra steps.`);
  }
  
  if (totalStars === 0) {
    roastParts.push(`\n⭐ IMPACT MEASUREMENT: Zero stars across all repositories. You've managed to create code so uninspiring that not even sympathy stars could save it.`);
  } else if (totalStars < 10) {
    roastParts.push(`\n⭐ IMPACT MEASUREMENT: ${totalStars} total stars across ${repoCount} repositories. That's an average of ${(totalStars/repoCount).toFixed(2)} stars per repo. Participation trophy level achievement unlocked!`);
  }
  
  // LANGUAGE EXPERTISE ANALYSIS
  if (metrics.languages.length === 0) {
    roastParts.push(`\n💻 TECHNICAL ASSESSMENT: No detectable programming languages. Are you sure you're a developer, or did you just get lost on your way to LinkedIn?`);
  } else if (metrics.languages.length === 1) {
    const language = metrics.languages[0];
    const languageRoasts = LANGUAGE_ROASTS[language] || [`Coding exclusively in ${language}? That's not specialization, that's limitation with a fancy name.`];
    const selectedRoast = languageRoasts[Math.floor(Math.random() * languageRoasts.length)];
    roastParts.push(`\n💻 TECHNICAL ASSESSMENT: Only ${language}? ${selectedRoast}`);
  } else if (metrics.languages.length <= 3) {
    roastParts.push(`\n💻 TECHNICAL ASSESSMENT: ${metrics.languages.join(', ')} - a modest collection. You're like a programmer who only knows three chords but thinks they're a rockstar.`);
  } else {
    const mainLanguage = metrics.languages[0];
    if (LANGUAGE_ROASTS[mainLanguage]) {
      const languageRoasts = LANGUAGE_ROASTS[mainLanguage];
      const selectedRoast = languageRoasts[Math.floor(Math.random() * languageRoasts.length)];
      roastParts.push(`\n💻 TECHNICAL ASSESSMENT: Your main language is ${mainLanguage}. ${selectedRoast} At least you dabble in ${metrics.languages.length - 1} other languages, which is more diversity than your coding style shows.`);
    }
  }
  
  // ACTIVITY PATTERN ANALYSIS
  if (metrics.commitFrequency < 5) {
    roastParts.push(`\n📈 ACTIVITY ANALYSIS: ${metrics.commitFrequency} commits per month? That's not development, that's archaeological preservation. Your code evolves slower than continental drift.`);
  } else if (metrics.commitFrequency < 15) {
    roastParts.push(`\n📈 ACTIVITY ANALYSIS: ${metrics.commitFrequency} commits monthly - the perfect pace for someone who codes like they're being charged by the keystroke.`);
  } else if (metrics.commitFrequency > 100) {
    roastParts.push(`\n📈 ACTIVITY ANALYSIS: ${metrics.commitFrequency} commits per month? Either you're incredibly productive or you can't figure out how to make meaningful commits. Based on your other stats, I'm guessing the latter.`);
  }
  
  if (recentRepos.length === 0 && repositories.length > 0) {
    roastParts.push(`\n📈 ACTIVITY ANALYSIS: Zero repositories updated in the last 6 months. You've achieved coding nirvana - complete digital stillness. Or you've just given up.`);
  }
  
  // EMOJI AND PROFESSIONALISM ASSESSMENT
  if (metrics.emojiRatio > 0.7) {
    const emojiPercent = Math.round(metrics.emojiRatio * 100);
    roastParts.push(`\n🎭 PROFESSIONALISM CHECK: ${emojiPercent}% emoji usage in commits. Are you coding or creating a children's book? This is GitHub, not TikTok.`);
  } else if (metrics.emojiRatio > 0.3) {
    const emojiPercent = Math.round(metrics.emojiRatio * 100);
    roastParts.push(`\n🎭 PROFESSIONALISM CHECK: ${emojiPercent}% emoji usage. Someone told you emojis make commits more readable, and you believed them. How charmingly naive.`);
  }
  
  // REPOSITORY NAMING DISASTERS
  const genericNames = repositories.filter(repo => 
    /^(test|demo|hello|world|project|repo|untitled|new|my|sample|app|code|stuff|things)/i.test(repo.name)
  );
  if (genericNames.length >= 3) {
    roastParts.push(`\n🏷️ NAMING CONVENTION CRISIS: You have ${genericNames.length} repositories with generic names like "${genericNames.slice(0, 2).map(r => r.name).join('", "')}". Did you outsource your creativity to a random word generator?`);
  } else if (genericNames.length > 0) {
    roastParts.push(`\n🏷️ NAMING CONVENTION CRISIS: A repository literally named "${genericNames[0].name}"? Revolutionary. Shakespeare could learn from your poetic repository naming.`);
  }
  
  // PRODUCTIVITY SCORE DEVASTATION
  if (metrics.productivityScore <= 2) {
    roastParts.push(`\n🎯 OVERALL VERDICT: Productivity score ${metrics.productivityScore}/10. You've achieved what many thought impossible - negative contribution to the programming ecosystem. Congratulations, you're a human git reset --hard.`);
  } else if (metrics.productivityScore <= 4) {
    roastParts.push(`\n🎯 OVERALL VERDICT: Productivity score ${metrics.productivityScore}/10. You're like a participation trophy in human form - technically present, but that's about it.`);
  } else if (metrics.productivityScore <= 6) {
    roastParts.push(`\n🎯 OVERALL VERDICT: Productivity score ${metrics.productivityScore}/10. Solidly mediocre - you're the lukewarm coffee of the programming world.`);
  } else if (metrics.productivityScore <= 8) {
    roastParts.push(`\n🎯 OVERALL VERDICT: Productivity score ${metrics.productivityScore}/10. Actually not terrible! Still room for improvement, but you're approaching 'competent' territory.`);
  } else {
    roastParts.push(`\n🎯 OVERALL VERDICT: Productivity score ${metrics.productivityScore}/10. Impressive! You've managed to game the system or you're actually good at this. SearDuck is suspiciously pleased.`);
  }
  
  // FINAL BRUTAL CONCLUSION
  const personalizedFinalInsults = [
    "Your GitHub profile is like a haunted house - lots of empty rooms and nothing but disappointment.",
    "If your code were a movie, it would be a direct-to-video sequel nobody asked for.",
    "You're the coding equivalent of elevator music - technically functional, but nobody wants to experience it.",
    "Your programming style is like your personality - bland, predictable, and best experienced in small doses.",
    "If GitHub had a participation award, you'd be the template for the certificate.",
    "You code like you're trying to solve world hunger with a teaspoon - admirable intentions, questionable methods.",
    "Your repositories are like your dating life - lots of attempts, minimal success, and everyone's too polite to mention it."
  ];
  
  // Add personalized final insult based on specific metrics
  if (followers === 0 && totalStars === 0) {
    roastParts.push(`\n\n🔥 FINAL JUDGMENT: Zero followers, zero stars, infinite disappointment. You've achieved perfect social and technical invisibility. You're not just a ghost in the machine - you're a ghost that even other ghosts ignore.`);
  } else if (forkCount > originalRepos.length * 3) {
    roastParts.push(`\n\n🔥 FINAL JUDGMENT: Your GitHub is 75% other people's work. You're not a developer, you're a digital hoarder with commitment issues.`);
  } else {
    const randomInsult = personalizedFinalInsults[Math.floor(Math.random() * personalizedFinalInsults.length)];
    roastParts.push(`\n\n🔥 FINAL JUDGMENT: ${randomInsult}\n\nRemember: every expert was once a beginner, but not every beginner becomes an expert. You're living proof of the latter. 🦆💀`);
  }
  
  return roastParts.join(' ');
}

// Analysis functions
function analyzeCommitFrequency(commits) {
  const recentCommits = commits.length;
  
  if (recentCommits > 50) return { level: 'high', count: recentCommits };
  if (recentCommits < 10) return { level: 'low', count: recentCommits };
  return { level: 'medium', count: recentCommits };
}

function analyzeCommitMessages(commits) {
  const genericWords = ['fix', 'update', 'changes', 'stuff', 'things', 'work', 'test'];
  const shortMessages = commits.filter(commit => commit.message.length < 10);
  const genericMessages = commits.filter(commit => 
    genericWords.some(word => commit.message.toLowerCase().includes(word))
  );
  
  const emojiRegex = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu;
  const emojiCommits = commits.filter(commit => emojiRegex.test(commit.message));
  
  return {
    generic: genericMessages.length + shortMessages.length,
    total: commits.length,
    emojiCount: emojiCommits.length,
    emojiRatio: commits.length > 0 ? emojiCommits.length / commits.length : 0
  };
}

function analyzeLanguages(repos) {
  const languages = {};
  repos.forEach(repo => {
    if (repo.language) {
      languages[repo.language] = (languages[repo.language] || 0) + 1;
    }
  });
  
  const sortedLanguages = Object.entries(languages)
    .sort(([,a], [,b]) => b - a)
    .map(([lang]) => lang);
    
  return sortedLanguages;
}

function analyzeRepositories(repos) {
  const highlights = [];
  const patterns = [];

  const totalStars = repos.reduce((sum, repo) => sum + repo.stargazers_count, 0);
  const forkCount = repos.filter(repo => repo.fork).length;
  const originalCount = repos.length - forkCount;
  
  highlights.push(`${repos.length} repositories analyzed`);
  highlights.push(`${totalStars} total stars earned`);
  highlights.push(`${originalCount} original vs ${forkCount} forked repositories`);
  
  const staleRepos = repos.filter(repo => {
    const lastUpdate = new Date(repo.updated_at);
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
    return lastUpdate < oneYearAgo;
  }).length;
  
  if (staleRepos > 0) {
    highlights.push(`${staleRepos} repositories haven't been touched in over a year`);
  }
  
  const emptyRepos = repos.filter(repo => repo.size === 0).length;
  if (emptyRepos > 0) {
    highlights.push(`${emptyRepos} repositories are completely empty`);
  }
  
  if (forkCount > originalCount) {
    highlights.push('More forks than original work - creativity crisis detected');
  }

  patterns.push(`${repos.length} repositories scanned`);
  patterns.push(`Fork-to-original ratio: ${forkCount}:${originalCount}`);

  return { highlights, patterns };
}

function calculateMetrics(profile, repositories) {
  const totalCommits = repositories.reduce((sum, repo) => sum + (repo.size || 0), 0);
  const monthsSinceJoined = Math.max(1, (Date.now() - new Date(profile.created_at)) / (1000 * 60 * 60 * 24 * 30));
  const commitFrequency = parseFloat((totalCommits / monthsSinceJoined).toFixed(1));

  // Enhanced language analysis with popularity ranking
  const languageStats = {};
  repositories.forEach(repo => {
    if (repo.language) {
      languageStats[repo.language] = (languageStats[repo.language] || 0) + 1;
    }
  });
  
  const languages = Object.entries(languageStats)
    .sort(([,a], [,b]) => b - a)
    .map(([lang]) => lang)
    .slice(0, 8); // Increased to 8 for better analysis

  // Enhanced emoji analysis - check repository names AND descriptions
  const repoNames = repositories.map(repo => repo.name.toLowerCase());
  const repoDescriptions = repositories.map(repo => (repo.description || '').toLowerCase());
  const emojiPattern = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu;
  
  const totalRepos = repositories.length;
  const emojiRepos = repoNames.filter(name => emojiPattern.test(name)).length;
  const emojiDescriptions = repoDescriptions.filter(desc => emojiPattern.test(desc)).length;
  const emojiRatio = totalRepos > 0 ? (emojiRepos + emojiDescriptions) / (totalRepos * 2) : 0;

  // Calculate additional metrics for enhanced roasting
  const totalStars = repositories.reduce((sum, repo) => sum + repo.stargazers_count, 0);
  const totalForks = repositories.reduce((sum, repo) => sum + repo.forks_count, 0);
  const totalWatchers = repositories.reduce((sum, repo) => sum + repo.watchers_count, 0);
  const forkCount = repositories.filter(repo => repo.fork).length;
  const originalRepos = repositories.filter(repo => !repo.fork);
  const emptyRepos = repositories.filter(repo => repo.size === 0);
  const archivedRepos = repositories.filter(repo => repo.archived);
  
  // Calculate repository activity patterns
  const now = new Date();
  const oneYearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
  const sixMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate());
  const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
  
  const recentRepos = repositories.filter(repo => new Date(repo.updated_at) > oneMonthAgo);
  const staleRepos = repositories.filter(repo => new Date(repo.updated_at) < oneYearAgo);
  
  // Analyze repository naming patterns
  const genericNamePattern = /^(test|demo|hello|world|project|repo|untitled|new|my|sample|app|code|stuff|things|practice|learning|tutorial)/i;
  const genericNames = repositories.filter(repo => genericNamePattern.test(repo.name));
  
  // Calculate enhanced productivity score with more factors
  let productivityScore = 5;
  
  // Commit frequency scoring
  if (commitFrequency > 100) productivityScore += 3;
  else if (commitFrequency > 50) productivityScore += 2;
  else if (commitFrequency > 20) productivityScore += 1;
  else if (commitFrequency < 5) productivityScore -= 2;
  else if (commitFrequency < 1) productivityScore -= 3;

  // Language diversity scoring
  if (languages.length > 7) productivityScore += 2;
  else if (languages.length > 5) productivityScore += 1;
  else if (languages.length <= 1) productivityScore -= 2;
  else if (languages.length === 0) productivityScore -= 3;

  // Social impact scoring
  if (profile.followers > 500) productivityScore += 3;
  else if (profile.followers > 100) productivityScore += 2;
  else if (profile.followers > 50) productivityScore += 1;
  else if (profile.followers < 5) productivityScore -= 1;
  else if (profile.followers === 0) productivityScore -= 2;

  // Star count scoring
  if (totalStars > 500) productivityScore += 3;
  else if (totalStars > 100) productivityScore += 2;
  else if (totalStars > 50) productivityScore += 1;
  else if (totalStars === 0) productivityScore -= 1;

  // Repository quality scoring
  const forkRatio = totalRepos > 0 ? forkCount / totalRepos : 0;
  if (forkRatio > 0.7) productivityScore -= 2; // Too many forks
  if (emptyRepos.length > totalRepos * 0.3) productivityScore -= 1; // Too many empty repos
  if (genericNames.length > totalRepos * 0.5) productivityScore -= 1; // Too many generic names
  if (archivedRepos.length > totalRepos * 0.4) productivityScore -= 1; // Too many archived
  
  // Activity pattern scoring
  if (recentRepos.length === 0 && totalRepos > 0) productivityScore -= 1; // No recent activity
  if (staleRepos.length > totalRepos * 0.6) productivityScore -= 1; // Too many stale repos

  // Profile completeness scoring
  if (!profile.bio) productivityScore -= 1;
  if (!profile.location && !profile.company) productivityScore -= 1;
  
  productivityScore = Math.max(1, Math.min(10, productivityScore));

  return {
    commitFrequency,
    emojiRatio,
    languages,
    productivityScore,
    // Additional metrics for enhanced roasting
    totalStars,
    totalForks,
    totalWatchers,
    followers: profile.followers,
    following: profile.following,
    totalRepos: totalRepos,
    originalRepos: originalRepos.length,
    forkCount,
    emptyRepos: emptyRepos.length,
    archivedRepos: archivedRepos.length,
    recentRepos: recentRepos.length,
    staleRepos: staleRepos.length,
    genericNames: genericNames.length,
    accountAge: Math.floor((now - new Date(profile.created_at)) / (365 * 24 * 60 * 60 * 1000)),
    hasProfile: !!(profile.bio || profile.location || profile.company),
    forkRatio: forkRatio
  };
}

exports.handler = async (event, context) => {
  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' }),
    };
  }

  try {
    const { username } = JSON.parse(event.body);

    if (!username) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Username is required' }),
      };
    }

    // Demo mode for rate limiting or testing
    if (username.toLowerCase() === 'demo' || username.toLowerCase() === 'test') {
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({
          username: 'demo',
          roast: `🦆💀 BEHOLD! A demo target has appeared! SearDuck's sensors detect this is just a test, but even demo accounts aren't safe from the truth!\n\nYour simulated coding habits show a concerning pattern of perfectionism mixed with demo-worthy mediocrity. SearDuck has analyzed your hypothetical repositories and found them... adequately disappointing!\n\nThe duck's verdict: This demo proves you need GitGrill in your life. Your real GitHub profile probably needs even more roasting than this fake one!`,
          metrics: {
            commitFrequency: 15.3,
            emojiRatio: 0.42,
            languages: ['JavaScript', 'Python', 'TypeScript', 'CSS', 'HTML'],
            productivityScore: 7
          },
          analysis: {
            highlights: [
              '153 commits analyzed - you\'re productive!',
              'Uses 5 programming languages',
              '42% of commits contain emojis',
              'Repository naming could use some work'
            ],
            patterns: ['153 commits analyzed', '23 repositories scanned']
          }
        }),
      };
    }

    console.log(`Fetching profile for username: ${username}`);

    // Fetch user profile
    const profileResponse = await fetch(`https://api.github.com/users/${username}`, {
      headers: getGitHubHeaders(),
    });

    if (!profileResponse.ok) {
      console.log(`Profile fetch failed. Status: ${profileResponse.status}, StatusText: ${profileResponse.statusText}`);
      
      if (profileResponse.status === 404) {
        throw new Error('User not found');
      } else if (profileResponse.status === 403) {
        throw new Error('GitHub API rate limit exceeded. Try username "demo" to see a working example, or wait a few minutes and try again!');
      } else {
        throw new Error('GitHub API temporarily unavailable');
      }
    }

    const profile = await profileResponse.json();
    console.log(`Successfully fetched profile for: ${profile.login}`);

    // Fetch user repositories
    console.log(`Fetching repositories for: ${username}`);
    const reposResponse = await fetch(`https://api.github.com/users/${username}/repos?per_page=100&sort=updated`, {
      headers: getGitHubHeaders(),
    });

    if (!reposResponse.ok) {
      throw new Error(`Failed to fetch repositories: ${reposResponse.statusText}`);
    }

    const repositories = await reposResponse.json();
    console.log(`Found ${repositories.length} repositories for ${username}`);

    // Calculate metrics and analysis
    const metrics = calculateMetrics(profile, repositories);
    const analysis = analyzeRepositories(repositories);

    // Generate personalized roast
    const roast = generatePersonalizedRoast(profile, repositories, metrics, analysis);

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        username: profile.login,
        roast,
        metrics,
        analysis
      }),
    };

  } catch (error) {
    console.error('Error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        error: error.message || 'Failed to roast. SearDuck is displeased.'
      }),
    };
  }
}; 